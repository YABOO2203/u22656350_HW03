@model INF272_HW_Assignment_2.Models.ReportViewModel

@{
    ViewBag.Title = "Reports";
    
}

<h2 class="mt-4">Generate Report</h2>

<!-- Report Generation Form -->
@using (Html.BeginForm("GenerateReport", "Home", FormMethod.Post, new { id = "reportForm" }))
{
    <div class="form-group">
        <label for="startDate">Start Date</label>
        <input type="date" id="startDate" name="startDate" class="form-control" required />
    </div>

    <div class="form-group">
        <label for="endDate">End Date</label>
        <input type="date" id="endDate" name="endDate" class="form-control" required />
    </div>

    <div class="form-group">
        <label for="reportType">Report Type</label>
        <select id="reportType" name="reportType" class="form-control" required>
            <option value="PopularBooks">Popular Books</option>
            <option value="BorrowingHistory">Borrowing History</option>
        </select>
    </div>

    <div class="form-group">
        <label for="fileName">File Name</label>
        <input type="text" id="fileName" name="fileName" class="form-control" required />
    </div>

    <div class="form-group">
        <label for="fileType">File Type</label>
        <select id="fileType" name="fileType" class="form-control" required>
            <option value="Pdf">PDF</option>
            <option value="Excel">Excel</option>
        </select>
    </div>

    <button type="submit" id="downloadReport" class="btn btn-primary">Generate Report</button>
}

<h3 class="mt-4">Document Archive</h3>
<table class="table table-bordered table-striped mt-2">
    <thead class="thead-dark">
        <tr>
            <th>File Name</th>
            <th>Report Type</th>
            <th>Created Date</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="documentArchiveBody">
        <!-- Rows will be populated by JavaScript -->
    </tbody>
</table>

<!-- Quill Editor for Description -->
<div id="editor" style="height: 100px; display: none;"></div>

@section Scripts {
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>

    <script>
        const editor = new Quill('#editor', {
            theme: 'snow',
            modules: {
                toolbar: [
                    ['bold', 'italic', 'underline'],
                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                    ['clean'] // remove formatting button
                ]
            }
        });

        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("reportForm").addEventListener("submit", function (event) {
                event.preventDefault();

                const fileType = document.getElementById("fileType").value;
                const reportType = document.getElementById("reportType").value;
                const fileName = document.getElementById("fileName").value;

                const formData = new FormData(this);
                fetch(this.action, {
                    method: 'POST',
                    body: formData
                })
                    .then(response => {
                        if (!response.ok) throw new Error('Network response was not ok');
                        return response.json();
                    })
                    .then(data => {
                        if (data.FileData) {
                            // Save to localStorage
                            const fileData = {
                                FileName: data.FileName,
                                ReportType: reportType,
                                CreatedDate: new Date().toLocaleString(),
                                FileData: data.FileData,
                                Description: '' // Initialize with an empty description
                            };
                            localStorage.setItem(data.FileName, JSON.stringify(fileData));

                            // Trigger file download
                            const link = document.createElement('a');
                            link.href = `data:${data.FileType};base64,${data.FileData}`;
                            link.download = data.FileName;
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);

                            // Refresh the document archive display
                            displayDocumentArchive();
                        }
                    })
                    .catch(error => console.error('There was a problem with the fetch operation:', error));
            });

            function displayDocumentArchive() {
                const archiveTableBody = document.getElementById('documentArchiveBody');
                archiveTableBody.innerHTML = ''; // Clear existing entries

                // Iterate through localStorage
                for (let i = 0; i < localStorage.length; i++) {
                    const key = localStorage.key(i);
                    const value = JSON.parse(localStorage.getItem(key));

                    // Create a new row for each document
                    const row = document.createElement('tr');
                    const fileNameCell = document.createElement('td');
                    const reportTypeCell = document.createElement('td');
                    const createdDateCell = document.createElement('td');
                    const descriptionCell = document.createElement('td');
                    const actionsCell = document.createElement('td');

                    fileNameCell.innerText = value.FileName; // File name
                    reportTypeCell.innerText = value.ReportType; // Report type
                    createdDateCell.innerText = value.CreatedDate; // Created date
                    descriptionCell.innerHTML = `<div>${value.Description || 'No description'}</div>
                                <button onclick="editDescription('${key}')" class="btn btn-info btn-sm mt-1">Edit</button>`;

                    actionsCell.innerHTML = `
                                <button onclick="redownloadFile('${key}')" class="btn btn-secondary btn-sm">Redownload</button>
                                <button onclick="deleteFile('${key}')" class="btn btn-danger btn-sm">Delete</button>
                            `;

                    row.appendChild(fileNameCell);
                    row.appendChild(reportTypeCell);
                    row.appendChild(createdDateCell);
                    row.appendChild(descriptionCell);
                    row.appendChild(actionsCell);
                    archiveTableBody.appendChild(row);
                }
            }

            window.redownloadFile = function (fileName) {
                const fileData = JSON.parse(localStorage.getItem(fileName));
                const link = document.createElement('a');
                link.href = `data:application/pdf;base64,${fileData.FileData}`; // Change MIME type if needed
                link.download = fileData.FileName;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            };

            window.deleteFile = function (fileName) {
                localStorage.removeItem(fileName);
                displayDocumentArchive();
            };

            window.editDescription = function (fileName) {
                const fileData = JSON.parse(localStorage.getItem(fileName));
                editor.setContents(editor.clipboard.convert(fileData.Description)); // Load existing description
                document.getElementById('editor').style.display = 'block';

                const saveDescriptionButton = document.createElement('button');
                saveDescriptionButton.innerText = 'Save Description';
                saveDescriptionButton.className = 'btn btn-success mt-2';
                saveDescriptionButton.onclick = function () {
                    fileData.Description = editor.root.innerHTML; // Save description
                    localStorage.setItem(fileName, JSON.stringify(fileData)); // Update local storage
                    document.getElementById('editor').style.display = 'none'; // Hide editor
                    saveDescriptionButton.remove(); // Remove button
                    displayDocumentArchive(); // Refresh archive
                };
                document.body.appendChild(saveDescriptionButton);
            };

            // Initial display of document archive
            displayDocumentArchive();
        });
    </script>
}
